// Generated by CoffeeScript 1.3.1
(function() {
  var EventEmitter, MakeSync, Sync, Wd, WdWrap, buildOptions, eventEmitterMethods, k, mixedArgsMethods, patch, v, wd, wdSync, _ref,
    __slice = [].slice;

  wd = require("wd");

  _ref = require('make-sync'), MakeSync = _ref.MakeSync, Sync = _ref.Sync;

  EventEmitter = require('events').EventEmitter;

  mixedArgsMethods = ['executeAsync', 'element', 'getAttribute', 'text'];

  eventEmitterMethods = (function() {
    var _ref1, _results;
    _ref1 = EventEmitter.prototype;
    _results = [];
    for (k in _ref1) {
      v = _ref1[k];
      if (typeof v === 'function') {
        _results.push(k);
      }
    }
    return _results;
  })();

  buildOptions = function(mode) {
    if (!(mode != null)) {
      mode = 'sync';
    }
    return {
      mode: mode,
      include: '*',
      exclude: mixedArgsMethods.concat(eventEmitterMethods.concat(['getOpts', 'defaultElement']))
    };
  };

  patch = function(browser, mode) {
    var k, m, options, _element, _fn, _i, _j, _len, _len1, _moveTo, _ref1, _results;
    _element = browser.element;
    browser.element = function() {
      var args, cb, done, _i;
      args = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), done = arguments[_i++];
      cb = function() {
        var err, res;
        err = arguments[0], res = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        if ((err != null ? err.status : void 0) === 7) {
          return done(null, void 0);
        } else {
          return done.apply(null, [err].concat(__slice.call(res)));
        }
      };
      args.push(cb);
      return _element.apply(this, args);
    };
    _moveTo = browser.moveTo;
    browser.moveTo = function() {
      var args, done, _i;
      args = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), done = arguments[_i++];
      while (args.length < 3) {
        args.push(void 0);
      }
      args.push(done);
      return _moveTo.apply(this, args);
    };
    _ref1 = ['click', 'doubleclick'];
    _fn = function() {
      var _m;
      _m = browser[m];
      return browser[m] = function() {
        var args, done, _j;
        args = 2 <= arguments.length ? __slice.call(arguments, 0, _j = arguments.length - 1) : (_j = 0, []), done = arguments[_j++];
        if (args.length === 0) {
          args.push(0);
        }
        args.push(done);
        return _m.apply(this, args);
      };
    };
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      m = _ref1[_i];
      _fn();
    }
    options = buildOptions(mode);
    MakeSync(browser, options);
    _results = [];
    for (_j = 0, _len1 = mixedArgsMethods.length; _j < _len1; _j++) {
      k = mixedArgsMethods[_j];
      _results.push((function() {
        return browser[k] = MakeSync(browser[k], {
          mode: ['mixed', 'args']
        });
      })());
    }
    return _results;
  };

  wdSync = {
    remote: function() {
      var args, browser, mode;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      mode = 'sync';
      args = args.filter(function(arg) {
        if (arg.mode != null) {
          mode = arg.mode;
          return false;
        } else {
          return true;
        }
      });
      browser = wd.remote.apply(wd, args);
      patch(browser, mode);
      return browser;
    },
    current: function() {
      return Fiber.current.wd_sync_browser;
    }
  };

  Wd = function(options, cb) {
    var _ref1;
    if (typeof options === 'function') {
      _ref1 = [null, options], options = _ref1[0], cb = _ref1[1];
    }
    if (cb != null) {
      Sync(function() {
        Fiber.current.wd_sync_browser = options != null ? options["with"] : void 0;
        return cb.apply(options != null ? options["with"] : void 0, []);
      });
    }
    if (options) {
      return function(options2, cb2) {
        var _ref2;
        if (typeof options2 === 'function') {
          _ref2 = [null, options2], options2 = _ref2[0], cb2 = _ref2[1];
        }
        if (!(options2 != null)) {
          options2 = options;
        }
        return Wd(options2, cb2);
      };
    }
  };

  WdWrap = function(options, cb) {
    var _ref1;
    if (typeof options === 'function') {
      _ref1 = [null, options], options = _ref1[0], cb = _ref1[1];
    }
    if (cb != null) {
      return function(done) {
        if ((options != null ? options.pre : void 0) != null) {
          options.pre.apply(this, []);
        }
        return Sync(function() {
          Fiber.current.wd_sync_browser = options != null ? typeof options["with"] === "function" ? options["with"]() : void 0 : void 0;
          cb.apply(options != null ? typeof options["with"] === "function" ? options["with"]() : void 0 : void 0, []);
          if (done != null) {
            return done();
          }
        });
      };
    }
    if (options) {
      return function(options2, cb2) {
        var _ref2;
        if (typeof options2 === 'function') {
          _ref2 = [null, options2], options2 = _ref2[0], cb2 = _ref2[1];
        }
        if (!(options2 != null)) {
          options2 = options;
        }
        return WdWrap(options2, cb2);
      };
    }
  };

  exports.Wd = Wd;

  exports.WdWrap = WdWrap;

  exports.wd = wdSync;

}).call(this);
