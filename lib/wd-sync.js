// Generated by CoffeeScript 1.3.3
(function() {
  var EventEmitter, MakeSync, Sync, Wd, WdWrap, buildOptions, eventEmitterMethods, k, mixedArgsMethods, patch, sleep, v, wd, wdSync, wrapAsyncObject, wrapSyncObject, _ref,
    __slice = [].slice;

  wd = require("wd");

  _ref = require('make-sync'), MakeSync = _ref.MakeSync, Sync = _ref.Sync;

  EventEmitter = require('events').EventEmitter;

  mixedArgsMethods = ['executeAsync', 'safeExecuteAsync'];

  eventEmitterMethods = (function() {
    var _ref1, _results;
    _ref1 = EventEmitter.prototype;
    _results = [];
    for (k in _ref1) {
      v = _ref1[k];
      if (typeof v === 'function') {
        _results.push(k);
      }
    }
    return _results;
  })();

  buildOptions = function(mode) {
    if (!(mode != null)) {
      mode = 'sync';
    }
    return {
      mode: mode,
      include: '*',
      exclude: mixedArgsMethods.concat(eventEmitterMethods.concat([/^_/, 'toString']))
    };
  };

  wrapAsyncObject = function(obj) {
    var res;
    res = {};
    for (k in obj) {
      v = obj[k];
      if ((typeof v) === 'function') {
        (function() {
          var _v;
          _v = v;
          return res[k] = function() {
            var args;
            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            return _v.apply(obj, args);
          };
        })();
      }
    }
    return res;
  };

  wrapSyncObject = function(obj, options) {
    var res;
    res = {};
    for (k in obj) {
      v = obj[k];
      if ((typeof v) === 'function') {
        (function() {
          var _v;
          _v = v;
          return res[k] = function() {
            var args, _res;
            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            _res = _v.apply(obj, args);
            if ((_res != null ? _res.browser : void 0) != null) {
              MakeSync(_res, options);
            }
            return _res;
          };
        })();
      }
    }
    return res;
  };

  patch = function(browser, mode) {
    var options, _fn, _i, _len;
    browser = wrapAsyncObject(browser);
    options = buildOptions(mode);
    MakeSync(browser, options);
    _fn = function() {
      return browser[k] = MakeSync(browser[k], {
        mode: ['mixed', 'args']
      });
    };
    for (_i = 0, _len = mixedArgsMethods.length; _i < _len; _i++) {
      k = mixedArgsMethods[_i];
      _fn();
    }
    browser = wrapSyncObject(browser, options);
    return browser;
  };

  wdSync = {
    SPECIAL_KEYS: wd.SPECIAL_KEYS,
    remote: function() {
      var arg, args, browser, mode, _i, _len;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      mode = 'sync';
      browser = wd.remote.apply(wd, args);
      for (_i = 0, _len = args.length; _i < _len; _i++) {
        arg = args[_i];
        if ((arg != null ? arg.mode : void 0) != null) {
          mode = arg.mode;
        }
      }
      browser = patch(browser, mode);
      return browser;
    },
    headless: function() {
      var arg, args, browser, mode, wdZombie, _i, _len;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      wdZombie = require("wd-zombie");
      mode = 'sync';
      browser = wdZombie.remote.apply(wdZombie, args);
      for (_i = 0, _len = args.length; _i < _len; _i++) {
        arg = args[_i];
        if ((arg != null ? arg.mode : void 0) != null) {
          mode = arg.mode;
        }
      }
      browser = patch(browser, mode);
      return browser;
    },
    current: function() {
      return Fiber.current.wd_sync_browser;
    }
  };

  Wd = function(options, cb) {
    var _ref1;
    if (typeof options === 'function') {
      _ref1 = [null, options], options = _ref1[0], cb = _ref1[1];
    }
    if (cb != null) {
      Sync(function() {
        Fiber.current.wd_sync_browser = options != null ? options["with"] : void 0;
        return cb.apply(options != null ? options["with"] : void 0, []);
      });
    }
    if (options) {
      return function(options2, cb2) {
        var _ref2;
        if (typeof options2 === 'function') {
          _ref2 = [null, options2], options2 = _ref2[0], cb2 = _ref2[1];
        }
        if (!(options2 != null)) {
          options2 = options;
        }
        return Wd(options2, cb2);
      };
    }
  };

  WdWrap = function(options, cb) {
    var _ref1;
    if (typeof options === 'function') {
      _ref1 = [null, options], options = _ref1[0], cb = _ref1[1];
    }
    if (cb != null) {
      return function(done) {
        if ((options != null ? options.pre : void 0) != null) {
          options.pre.apply(this, []);
        }
        return Sync(function() {
          Fiber.current.wd_sync_browser = options != null ? typeof options["with"] === "function" ? options["with"]() : void 0 : void 0;
          cb.apply(options != null ? typeof options["with"] === "function" ? options["with"]() : void 0 : void 0, []);
          if (done != null) {
            return done();
          }
        });
      };
    }
    if (options) {
      return function(options2, cb2) {
        var _ref2;
        if (typeof options2 === 'function') {
          _ref2 = [null, options2], options2 = _ref2[0], cb2 = _ref2[1];
        }
        if (!(options2 != null)) {
          options2 = options;
        }
        return WdWrap(options2, cb2);
      };
    }
  };

  sleep = function(ms) {
    var fiber;
    fiber = Fiber.current;
    setTimeout(function() {
      return fiber.run();
    }, ms);
    return Fiber["yield"]();
  };

  exports.Wd = Wd;

  exports.WdWrap = WdWrap;

  exports.wd = wdSync;

  exports.sleep = sleep;

}).call(this);
