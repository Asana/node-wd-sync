// Generated by CoffeeScript 1.3.1
(function() {
  var CoffeeScript, Wd, WdWrap, should, testWithBrowser, wd, _ref;

  _ref = require('../../index'), wd = _ref.wd, Wd = _ref.Wd, WdWrap = _ref.WdWrap;

  should = require('should');

  CoffeeScript = require('coffee-script');

  testWithBrowser = function(browserName) {
    return it("using " + browserName, function(done) {
      this.setWaitTimeout(3000);
      return done();
    });
  };

  describe("wd-sync", function() {
    return describe("method tests", function() {
      var browser;
      browser = null;
      WdWrap = WdWrap({
        "with": (function() {
          return browser;
        })
      });
      it("wd.remote", function(done) {
        browser = wd.remote({
          mode: 'sync'
        });
        Wd = Wd({
          "with": browser
        });
        return done();
      });
      it("init", WdWrap(function() {
        return this.init({
          browserName: "chrome"
        });
      }));
      it("get", WdWrap(function() {
        return this.get("file://" + __dirname + "/assets/test-page.html");
      }));
      it("refresh", WdWrap(function() {
        return this.refresh();
      }));
      it("eval", WdWrap(function() {
        (this["eval"]("1+2")).should.equal(3);
        (this["eval"]("document.title")).should.equal("TEST PAGE");
        (this["eval"]("$('#evalTest').length")).should.equal(1);
        return (this["eval"]("$('#evalTest li').length")).should.equal(2);
      }));
      it("execute", WdWrap(function() {
        this.execute("window.wd_sync_execute_test = 'It worked!'");
        return (this["eval"]("window.wd_sync_execute_test")).should.equal('It worked!');
      }));
      it("executeAsync (async mode)", function(done) {
        var scriptAsCoffee, scriptAsJs;
        scriptAsCoffee = "[args...,done] = arguments\ndone \"OK\"              ";
        scriptAsJs = CoffeeScript.compile(scriptAsCoffee, {
          bare: 'on'
        });
        return browser.executeAsync(scriptAsJs, function(err, res) {
          res.should.equal("OK");
          return done();
        });
      });
      it("executeAsync (sync mode)", WdWrap(function() {
        var res, scriptAsCoffee, scriptAsJs;
        scriptAsCoffee = "[args...,done] = arguments\ndone \"OK\"              ";
        scriptAsJs = CoffeeScript.compile(scriptAsCoffee, {
          bare: 'on'
        });
        res = this.executeAsync(scriptAsJs);
        return res.should.equal("OK");
      }));
      it("setWaitTimeout", WdWrap(function() {}));
      it("element", WdWrap(function() {
        should.exist(this.element("name", "helloByName"));
        return should.not.exist(this.element("name", "helloByName2"));
      }));
      it("elementByLinkText", WdWrap(function() {
        should.exist(this.elementByLinkText("click helloByLinkText"));
        return should.not.exist(this.elementByLinkText("click helloByLinkText2"));
      }));
      it("elementById", WdWrap(function() {
        should.exist(this.elementById("helloById"));
        return should.not.exist(this.elementById("helloById2"));
      }));
      it("elementByName", WdWrap(function() {
        should.exist(this.elementByName("helloByName"));
        return should.not.exist(this.elementByName("helloByName2"));
      }));
      it("elementByCss", WdWrap(function() {
        should.exist(this.elementByCss("#helloById"));
        return should.not.exist(this.elementByCss("#helloById2"));
      }));
      it("getAttribute", WdWrap(function() {
        var testDiv;
        testDiv = this.elementById("getAttributeTest");
        should.exist(testDiv);
        (this.getAttribute(testDiv, "weather")).should.equal("sunny");
        return should.not.exist(this.getAttribute(testDiv, "timezone"));
      }));
      it("getValue (input)", WdWrap(function() {
        var inputField;
        inputField = this.elementByCss("#getValueTest input");
        should.exist(inputField);
        return (this.getValue(inputField)).should.equal("Hello getValueTest!");
      }));
      it("getValue (textarea)", WdWrap(function() {
        var inputField;
        inputField = this.elementByCss("#getValueTest2 textarea");
        should.exist(inputField);
        return (this.getValue(inputField)).should.equal("Hello getValueTest2!");
      }));
      it("clickElement", WdWrap(function() {}));
      it("moveTo", WdWrap(function() {}));
      it("scroll", WdWrap(function() {}));
      it("buttonDown", WdWrap(function() {}));
      it("buttonUp", WdWrap(function() {}));
      it("click", WdWrap(function() {}));
      it("doubleclick", WdWrap(function() {}));
      it("type", WdWrap(function() {
        var inputField;
        inputField = this.elementByCss("#typeTest input");
        should.exist(inputField);
        this.type(inputField, "Hello World");
        (this.getValue(inputField)).should.equal("Hello World");
        this.type(inputField, "\n");
        return (this.getValue(inputField)).should.equal("Hello World");
      }));
      it("clear", WdWrap(function() {}));
      it("title", WdWrap(function() {
        return this.title().should.equal("TEST PAGE");
      }));
      it("text", WdWrap(function() {
        var textDiv;
        textDiv = this.elementByCss("#textTest");
        should.exist(textDiv);
        (this.text(textDiv)).should.include("textTest content");
        return (this.text(textDiv)).should.not.include("div");
      }));
      it("textPresent", WdWrap(function() {}));
      it("dismiss_alert", WdWrap(function() {}));
      it("active", WdWrap(function() {}));
      it("keyToggle", WdWrap(function() {}));
      it("url", WdWrap(function() {}));
      it("close", WdWrap(function() {
        return this.close();
      }));
      return it("quit", WdWrap(function() {
        return this.quit();
      }));
    });
  });

}).call(this);
